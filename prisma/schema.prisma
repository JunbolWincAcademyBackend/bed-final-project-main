// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "sqlite" // Specifies SQLite as the database provider
  url      = env("DATABASE_URL") // Reads the database URL from the .env file
  relationMode = "prisma" // Prisma enforces all relationships instead of relying on SQLite's limited foreign key support
}

//adding models: All model names are in singular and start with Uppercase

/* The Booking model represents a reservation made by a user for a property. Each booking includes information about the user, the property, the dates of the stay, the number of guests, the total price, and the current booking status. */
model Booking {
  id             String   @id @default(uuid()) // Primary key with a default UUID value
  userId         String   // Foreign key referencing the User model üóùÔ∏è(foreign key being enforced) It stores the unique id of a user in the User model.
  propertyId     String   // Foreign key referencing the Property model üóùÔ∏è(foreign key being enforced)
  checkinDate    DateTime // Check-in date for the booking
  checkoutDate   DateTime // Check-out date for the booking
  numberOfGuests Int      // Total number of guests for the booking
  totalPrice     Float    // Total price for the booking (in a floating-point format)
  bookingStatus  String   // Current status of the booking (e.g., confirmed, pending, cancelled)

  // Relationships
user     User     @relation(fields: [userId], references: [id]) 
// Relationship definition. The @relation() directive establishes a connection between the "userId" field in the Booking model and the "id" field in the User model. This ensures data integrity by enforcing that a Booking cannot reference a User that doesn‚Äôt exist (like a condition). It also allows you to query and retrieve the related User data directly when querying a Booking.
 
/*   The @relation directive specifies:
    fields: [userId]: The local field in the Booking model.
    references: [id]: The field in the User model it links to (id in the User model). 
    
    How It Works:
    When a new Booking is created, the userId value must match an existing id in the User table.
    This ensures data integrity ‚Äî a Booking cannot reference a User that doesn‚Äôt exist.
    */

  /* 
  Links this booking to a specific user.
  The "user" field allows you to access the related User data for a specific booking in your queries.
  The "User" model tells Prisma that the "user" field in the Booking model represents a relationship to the User model,
  establishing a connection between the "userId" field in Booking and the "id" field in the User model.

  Example Query inside the getBookings.js in the bookings folder:
  const bookingWithUser = await prisma.booking.findUnique({
    where: { id: "booking-id" }, // Replace "booking-id" with the actual booking ID
    include: { user: true },     // Include the related user
  });

  console.log(bookingWithUser.user.name); // Access the user's name

  so if the user was this one:       "id": "a1234567-89ab-cdef-0123-456789abcdef" (first user in the users.json)
  the OUTPUT of this log will be: John Doe
  */

  property Property @relation(fields: [propertyId], references: [id]) // Relationship definition
  /* 
  Links this booking to a specific property.
  The "property" field allows you to access the related Property data for a specific booking in your queries.
  The "Property" model tells Prisma that the "property" field in the Booking model represents a relationship to the Property model, establishing a connection between the "propertyId" field in Booking and the "id" field in the Property model.

  Example Query inside the getBookings.js in the bookings folder:
  const bookingWithProperty = await prisma.booking.findUnique({
    where: { id: "booking-id" }, // Replace "booking-id" with the actual booking ID
    include: { property: true }, // Include the related property
  });

  console.log(bookingWithProperty.property.title); // Access the property's title
  */

  // Indexes: @@index([field]): Adds an index on the specified field(s) at the model level. Indexes will allow the database to efficiently retrieve records when filtering or joining tables on these fields.
  @@index([userId])     // Create an index on the userId field for faster lookups
  @@index([propertyId]) // Create an index on the propertyId field for faster lookups
}

/* What is @@index?
The @@index directive is used to explicitly define indexes in your database schema.
What Is an Index?
An index is like a ‚Äúmap‚Äù the database uses to find data faster. Instead of scanning the entire table for a value, the database uses the index to jump directly to the relevant rows.
Why Add @@index?
‚Ä¢	In relationMode = "prisma", indexes on fields like userId, propertyId, and hostId are not created automatically because no foreign keys exist.
‚Ä¢	By adding @@index, you ensure the database can efficiently look up or filter records by these fields, even without foreign keys. */



/* The User model represents individuals who can create bookings and write reviews in the system. 
   Users have personal details such as username, name, and email, as well as a one-to-many relationship with Bookings and Reviews. */
model User {
  id            String     @id @default(uuid()) // Primary key with a default UUID value üóùÔ∏è (primary key being enforced)
  username      String     @unique              // A unique username for the user üóùÔ∏è (unique constraint being enforced)
  password      String                        // User's password for authentication
  name          String                        // User's full name
  email         String     @unique              // A unique email for the user üóùÔ∏è (unique constraint being enforced)
  phoneNumber   String                        // User's phone number
  profilePicture String?                      // Optional field for the user's profile picture URL

  // Relationships
  bookings      Booking[]                     // One-to-many relationship: A user can have multiple bookings
  /* 
  The "bookings" field establishes a one-to-many relationship between the User and Booking models.
  This means a single user can create multiple bookings.

  How it works:
  The relationship is automatically managed by Prisma. You can query this relationship in both directions:
    1. From User to Booking: Retrieve all bookings made by a specific user.
    2. From Booking to User: Retrieve the user who made a specific booking.

  Example Query inside the getUsers.js in the users folder:
  const userWithBookings = await prisma.user.findUnique({
    where: { id: "user-id" }, // Replace "user-id" with the actual user ID
    include: { bookings: true }, // Include all bookings for this user
  });

  console.log(userWithBookings.bookings); // Access the array of bookings
  */

  reviews       Review[]                      // One-to-many relationship: A user can write multiple reviews
  /* 
  The "reviews" field establishes a one-to-many relationship between the User and Review models.
  This means a single user can write multiple reviews for different properties.

  How it works:
  The relationship is automatically managed by Prisma. You can query this relationship in both directions:
    1. From User to Review: Retrieve all reviews written by a specific user.
    2. From Review to User: Retrieve the user who wrote a specific review.

  Example Query inside the getUsers.js in the users folder:
  const userWithReviews = await prisma.user.findUnique({
    where: { id: "user-id" }, // Replace "user-id" with the actual user ID
    include: { reviews: true }, // Include all reviews written by this user
  });

  console.log(userWithReviews.reviews); // Access the array of reviews
  */
}


/* The Property model represents a listing that users can book. Each property has details like location, price, and capacity, 
   and it can offer various amenities. */
model Property {
  id             String      @id @default(uuid()) // Primary key with a default UUID value üóùÔ∏è (primary key being enforced)
  title          String      // The title of the property (e.g., "Cozy Mountain Retreat")
  description    String      // A description of the property
  location       String      // The location of the property (e.g., "Rocky Mountains, Colorado")
  pricePerNight  Float       // The price per night (e.g., 120.5 for $120.50)
  bedroomCount   Int         // The number of bedrooms
  bathRoomCount  Int         // The number of bathrooms
  maxGuestCount  Int         // The maximum number of guests allowed
  rating         Float       // The overall rating of the property (e.g., 4.8 out of 5)

  // Relationships
  amenities      Amenity[]   @relation("PropertyAmenities") 
  /* 
  Many-to-many relationship linking this property to its amenities. 
  This relationship is bidirectional, meaning:
     1. You can retrieve all amenities available for a specific property.
     2. You can retrieve all properties that offer a specific amenity.

  Example Query inside the getProperties.js in the properties folder:
  const propertyWithAmenities = await prisma.property.findUnique({
    where: { id: "property-id" }, // Replace "property-id" with the actual property ID
    include: { amenities: true }, // Include all amenities for this property
  });

  console.log(propertyWithAmenities.amenities); // Access the array of amenities
  */

  reviews        Review[]    // One-to-many relationship: A property can have multiple reviews
  /* 
  Links this property to all reviews written about it.
  This relationship is bidirectional, meaning:
     1. From Property to Review: Retrieve all reviews written for a specific property.
     2. From Review to Property: Retrieve the property being reviewed.

  Example Query inside the getProperties.js in the properties folder:
  const propertyWithReviews = await prisma.property.findUnique({
    where: { id: "property-id" }, // Replace "property-id" with the actual property ID
    include: { reviews: true }, // Include all reviews for this property
  });

  console.log(propertyWithReviews.reviews); // Access the array of reviews
  */

  bookings       Booking[]   // One-to-many relationship: A property can have multiple bookings
  /* 
  Links this property to all bookings made for it.
  This relationship is bidirectional, meaning:
     1. From Property to Booking: Retrieve all bookings for a specific property.
     2. From Booking to Property: Retrieve the property being booked.

  Example Query inside the getProperties.js in the properties folder:
  const propertyWithBookings = await prisma.property.findUnique({
    where: { id: "property-id" }, // Replace "property-id" with the actual property ID
    include: { bookings: true }, // Include all bookings for this property
  });

  console.log(propertyWithBookings.bookings); // Access the array of bookings
  */

  hostId         String      // Foreign key referencing the Host model üóùÔ∏è (foreign key being enforced)
  host           Host        @relation(fields: [hostId], references: [id]) 
  /* 
  Links this property to the host who owns it.

  This relationship is bidirectional, meaning:
     1. From Property to Host: Retrieve the host who owns this property.
     2. From Host to Property: Retrieve all properties listed by a specific host.

  Example Query inside the getProperties.js in the properties folder:
  const propertyWithHost = await prisma.property.findUnique({
    where: { id: "property-id" }, // Replace "property-id" with the actual property ID
    include: { host: true }, // Include the host who owns this property
  });

  console.log(propertyWithHost.host.name); // Access the host's name
  */

  // Indexes
  @@index([hostId]) // Adds an index on hostId to optimize performance for queries involving host relationships
}




/* The Amenity model represents features a property can offer, such as Wifi or Gym. */
model Amenity {
  id         String   @id @default(uuid()) // Primary key
  name       String                      // Amenity name
  properties Property[] @relation("PropertyAmenities") 
  /* 
  Many-to-many relationship linking this amenity to properties.
  This means an amenity can belong to multiple properties, and a property can have multiple amenities.

  Example Query inside the getAmenities.js in the amenities folder:
  const amenityWithProperties = await prisma.amenity.findUnique({
    where: { id: "amenity-id" }, // Replace "amenity-id" with the actual amenity ID
    include: { properties: true },
  });

  console.log(amenityWithProperties.properties); // Access the array of properties that offer this amenity
  */
}

/* The Review model represents feedback from users about properties. 
   Each review contains information about the user who wrote it, the property being reviewed, and the feedback provided. */
model Review {
  id          String   @id @default(uuid()) // Primary key with a default UUID value üóùÔ∏è (primary key being enforced)
  userId      String   // Foreign key referencing the User model üóùÔ∏è (foreign key being enforced)
  propertyId  String   // Foreign key referencing the Property model üóùÔ∏è (foreign key being enforced)
  rating      Int      // Rating given by the user (e.g., 1 to 5 stars)
  comment     String?  // Optional comment from the user providing additional feedback

  // Relationships
  user        User      @relation(fields: [userId], references: [id]) 
  /* 
  Links this review to the user who wrote it.
  The "user" field connects the Review model to the User model, 
  establishing a relationship between the "userId" field in Review and the "id" field in User.

  How it works:
  This relationship allows you to query and retrieve the user who wrote a specific review.

  Example Query inside the getReviews.js in the reviews folder:
  const reviewWithUser = await prisma.review.findUnique({
    where: { id: "review-id" }, // Replace "review-id" with the actual review ID
    include: { user: true }, // Include the user who wrote this review
  });

  console.log(reviewWithUser.user.name); // Access the user's name
  */

  property    Property  @relation(fields: [propertyId], references: [id]) 
  /* 
  Links this review to the property being reviewed.
  The "property" field connects the Review model to the Property model,
  establishing a relationship between the "propertyId" field in Review and the "id" field in Property.

  How it works:
  This relationship allows you to query and retrieve the property associated with a specific review.

  Example Query inside the getReviews.js in the reviews folder:
  const reviewWithProperty = await prisma.review.findUnique({
    where: { id: "review-id" }, // Replace "review-id" with the actual review ID
    include: { property: true }, // Include the property being reviewed
  });

  console.log(reviewWithProperty.property.title); // Access the property's title
  */

  // Indexes
  @@index([userId])     // Adds an index on the userId field to improve query performance for user-related lookups
  @@index([propertyId]) // Adds an index on the propertyId field to improve query performance for property-related lookups
}



/* The Host model represents individuals who list properties for booking. 
   Each host can have multiple property listings, and they have personal details like username, name, and contact information. */
model Host {
  id             String     @id @default(uuid()) // Primary key with a default UUID value üóùÔ∏è (primary key being enforced)
  username       String     @unique              // A unique username for the host üóùÔ∏è (unique constraint being enforced)
  password       String                        // Host's password for authentication
  name           String                        // Host's full name (e.g., "John Doe")
  email          String     @unique              // A unique email for the host üóùÔ∏è (unique constraint being enforced)
  phoneNumber    String                        // Host's phone number (e.g., "+1234567890")
  profilePicture String?                      // Optional field for the host's profile picture URL
  aboutMe        String?                      // Optional field for a short bio about the host

  // Relationships
  listings       Property[]                   // One-to-many relationship: A host can list multiple properties
  /* 
  The "listings" field establishes a one-to-many relationship between the Host and Property models.
  This means a single host can list multiple properties.

  How it works:
  Prisma automatically manages this relationship. You can query this relationship in both directions:
    1. From Host to Property: Retrieve all properties listed by a specific host.
    2. From Property to Host: Retrieve the host who owns a specific property.

  Example Query inside the getHosts.js in the hosts folder:
  const hostWithListings = await prisma.host.findUnique({
    where: { id: "host-id" }, // Replace "host-id" with the actual host ID
    include: { listings: true }, // Include all properties listed by this host
  });

  console.log(hostWithListings.listings); // Access the array of properties listed by the host
  */
}


