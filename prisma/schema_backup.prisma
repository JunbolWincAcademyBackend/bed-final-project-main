generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

/// The Booking model represents a reservation made by a user for a property. Each booking includes information about the user, the property, the dates of the stay, the number of guests, the total price, and the current booking status.
//✅Fix: Add onDelete: Cascade to ensure that if a user or property is deleted, their bookings are also removed:
model Booking {
  id             String   @id @default(uuid())
  userId         String
  propertyId     String
  checkinDate    DateTime
  checkoutDate   DateTime
  numberOfGuests Int
  totalPrice     Float
  bookingStatus  String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade) // ✅ Ensures bookings are deleted when a user is deleted
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade) // ✅ Ensures bookings are deleted when a property is deleted

  @@index([userId])
  @@index([propertyId])
}

/// The User model represents individuals who can create bookings and write reviews in the system. 
/// Users have personal details such as username, name, and email, as well as a one-to-many relationship with Bookings and Reviews.
model User {
  id             String    @id @default(uuid())
  username       String    @unique
  password       String
  name           String
  email          String    @unique
  phoneNumber    String
  profilePicture String?
  role           String?   @default("user")
  bookings       Booking[]
  reviews        Review[]
}

/// The Property model represents a listing that users can book. Each property has details like location, price, and capacity, 
/// and it can offer various amenities.
model Property {
  id            String    @id @default(uuid())
  title         String
  description   String
  location      String
  pricePerNight Float
  bedroomCount  Int
  bathRoomCount Int
  maxGuestCount Int
  rating        Float
  /// Links this property to all bookings made for it.
  /// This relationship is bidirectional, meaning:
  /// 1. From Property to Booking: Retrieve all bookings for a specific property.
  /// 2. From Booking to Property: Retrieve the property being booked.
  ///
  /// Example Query inside the getProperties.js in the properties folder:
  /// const propertyWithBookings = await prisma.property.findUnique({
  /// where: { id: "property-id" }, // Replace "property-id" with the actual property ID
  /// include: { bookings: true }, // Include all bookings for this property
  /// });
  ///
  /// console.log(propertyWithBookings.bookings); // Access the array of bookings
  amenities     Amenity[] @relation("PropertyAmenities") // ✅ Correct many-to-many relationship
  reviews       Review[]
  bookings      Booking[]
  host          Host      @relation(fields: [hostId], references: [id], name: "PropertyHost") // ✅ Ensures bidirectional 
  hostId        String // ✅ Keep it simple, no @index here

  @@index([hostId]) // ✅ Add the index at the model level
}

/// The Amenity model represents features a property can offer, such as Wifi or Gym.
model Amenity {
  id         String     @id @default(uuid())
  name       String
  properties Property[] @relation("PropertyAmenities") // ✅ Correct many-to-many relationship
}

/// The Review model represents feedback from users about properties. 
/// Each review contains information about the user who wrote it, the property being reviewed, and the feedback provided.
model Review {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  rating     Int
  comment    String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) // ✅ Prevent foreign key errors
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade) // ✅ Prevent foreign key errors

  @@index([userId])
  @@index([propertyId])
}

/// The Host model represents individuals who list properties for booking. 
/// Each host can have multiple property listings, and they have personal details like username, name, and contact information.
model Host {
  id             String     @id @default(uuid())
  username       String     @unique
  password       String
  name           String
  email          String     @unique
  phoneNumber    String
  profilePicture String?
  aboutMe        String?
  listings       Property[] @relation("PropertyHost") // ✅ Correct way to define the relation
}
